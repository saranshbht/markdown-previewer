{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","markdown","this","setState","className","Badge","variant","style","width","height","marginLeft","marginRight","padding","margin","value","onChange","e","updateMarkdown","target","backgroundColor","overflow","dangerouslySetInnerHTML","__html","type","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAEIA,EAASC,EAAQ,IAuGNC,E,kDApGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAHK,E,2DAOJA,GACbC,KAAKC,SAAS,CAACF,e,+BAGP,IAAD,OAwBP,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,SAA7C,yBAON,yBAAKF,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,aAA7C,oBAMJ,yBAAKF,UAAU,aAAaG,MA9CrB,CACfC,MAAO,QACPC,OAAQ,OACRC,WAAY,OACZC,YAAa,OACbC,QAAS,QA0CC,8BAAUR,UAAU,QAAQG,MA7BpB,CAClBC,MAAO,OACPC,OAAQ,OACRI,OAAQ,OA0BoDC,MAAOZ,KAAKF,MAAMC,SACpEc,SACE,SAACC,GACC,EAAKC,eAAeD,EAAEE,OAAOJ,YAQrC,yBAAKV,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,aAA7C,aAMJ,yBAAKC,MA3DG,CAChBC,MAAO,QACPC,OAAQ,OACRU,gBAAiB,UACjBT,WAAY,OACZC,YAAa,OACbC,QAAS,OACTQ,SAAU,QAqDAC,wBAAyB,CAACC,OAAQ1B,EAAOM,KAAKF,MAAMC,eAK1D,yBAAKG,UAAU,YACb,yBAAKA,UAAU,mBACb,4BAAQmB,KAAK,SAASnB,UAAU,kBAChCoB,QACE,SAACR,GACD,EAAKC,eAAe,MAHtB,iB,GAxFIQ,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09817843.chunk.js","sourcesContent":["import React from 'react';\r\nimport Badge from \"react-bootstrap/Badge\"\r\nlet marked = require('marked');\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markdown: \"\",\r\n    };\r\n  }\r\n\r\n  updateMarkdown(markdown) {\r\n    this.setState({markdown});\r\n  }\r\n\r\n  render() {\r\n    var inputStyle = {\r\n      width: '400px',\r\n      height: '50vh',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      padding: '0px',\r\n    };\r\n\r\n    var outputStyle = {\r\n      width: '400px',\r\n      height: '50vh',\r\n      backgroundColor: '#DCDCDC',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      padding: '10px',\r\n      overflow: 'auto' \r\n    };\r\n\r\n    var textAreaStyle = {\r\n      width: '100%',\r\n      height: '100%',\r\n      margin: '0px'\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <div className=\"row mt-4\">\r\n            <div className=\"col text-center\">\r\n              <h1>\r\n                <Badge className=\"text-align-center\" variant=\"light\">\r\n                  Markdown Previewer\r\n                </Badge>\r\n              </h1>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row mt-4\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"col text-center\">\r\n                <h4>\r\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\r\n                    Markdown Input\r\n                  </Badge>\r\n                </h4>\r\n              </div>\r\n\r\n              <div className=\"mark-input\" style={inputStyle}>\r\n                <textarea className=\"input\" style={textAreaStyle} value={this.state.markdown}\r\n                onChange={\r\n                  (e) => {\r\n                    this.updateMarkdown(e.target.value);\r\n                  }\r\n                }>\r\n                  {/* {console.log(this.state.markdown)} */}\r\n                </textarea>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <div className=\"col text-center\">\r\n                <h4>\r\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\r\n                    Preview \r\n                  </Badge>\r\n                </h4>\r\n              </div>\r\n\r\n              <div style={outputStyle}\r\n                dangerouslySetInnerHTML={{__html: marked(this.state.markdown)}}>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row mt-4\">\r\n            <div className=\"col text-center\">\r\n              <button type=\"button\" className=\"btn btn-primary\" \r\n              onClick={\r\n                (e) => {\r\n                this.updateMarkdown(\"\");\r\n              }}>Reset</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}